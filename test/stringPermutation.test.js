import { expect } from "chai";
import getPermutations from "../lib/stringPermutation";

describe("String Permutations", function () {
  it("should return all possible combinations", function () {
    expect(getPermutations("abc")).to.eql([
      "abc",
      "acb",
      "bac",
      "bca",
      "cab",
      "cba",
    ]);

    expect(getPermutations("ABSG")).to.eql([
      "ABGS",
      "ABSG",
      "AGBS",
      "AGSB",
      "ASBG",
      "ASGB",
      "BAGS",
      "BASG",
      "BGAS",
      "BGSA",
      "BSAG",
      "BSGA",
      "GABS",
      "GASB",
      "GBAS",
      "GBSA",
      "GSAB",
      "GSBA",
      "SABG",
      "SAGB",
      "SBAG",
      "SBGA",
      "SGAB",
      "SGBA",
    ]);
  });

  it("문자열 길이가 길어져도 잘 작동해야 합니다.", function () {
    expect(getPermutations("abcde")).to.eql([
      'abcde',
      'abced',
      'abdce',
      'abdec',
      'abecd',
      'abedc',
      'acbde',
      'acbed',
      'acdbe',
      'acdeb',
      'acebd',
      'acedb',
      'adbce',
      'adbec',
      'adcbe',
      'adceb',
      'adebc',
      'adecb',
      'aebcd',
      'aebdc',
      'aecbd',
      'aecdb',
      'aedbc',
      'aedcb',
      'bacde',
      'baced',
      'badce',
      'badec',
      'baecd',
      'baedc',
      'bcade',
      'bcaed',
      'bcdae',
      'bcdea',
      'bcead',
      'bceda',
      'bdace',
      'bdaec',
      'bdcae',
      'bdcea',
      'bdeac',
      'bdeca',
      'beacd',
      'beadc',
      'becad',
      'becda',
      'bedac',
      'bedca',
      'cabde',
      'cabed',
      'cadbe',
      'cadeb',
      'caebd',
      'caedb',
      'cbade',
      'cbaed',
      'cbdae',
      'cbdea',
      'cbead',
      'cbeda',
      'cdabe',
      'cdaeb',
      'cdbae',
      'cdbea',
      'cdeab',
      'cdeba',
      'ceabd',
      'ceadb',
      'cebad',
      'cebda',
      'cedab',
      'cedba',
      'dabce',
      'dabec',
      'dacbe',
      'daceb',
      'daebc',
      'daecb',
      'dbace',
      'dbaec',
      'dbcae',
      'dbcea',
      'dbeac',
      'dbeca',
      'dcabe',
      'dcaeb',
      'dcbae',
      'dcbea',
      'dceab',
      'dceba',
      'deabc',
      'deacb',
      'debac',
      'debca',
      'decab',
      'decba',
      'eabcd',
      'eabdc',
      'eacbd',
      'eacdb',
      'eadbc',
      'eadcb',
      'ebacd',
      'ebadc',
      'ebcad',
      'ebcda',
      'ebdac',
      'ebdca',
      'ecabd',
      'ecadb',
      'ecbad',
      'ecbda',
      'ecdab',
      'ecdba',
      'edabc',
      'edacb',
      'edbac',
      'edbca',
      'edcab',
      'edcba'
    ])
  });
});
